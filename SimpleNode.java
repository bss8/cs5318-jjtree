import java.util.Optional;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

    protected Node parent;
    protected Node[] children;
    protected int id;
    protected Object value;
    protected eg2 parser;

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(eg2 p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    public void jjtSetValue(Object value) {
        this.value = value;
    }

    public Object jjtGetValue() {
        return value;
    }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

    public String toString() {
        return eg2TreeConstants.jjtNodeName[id];
    }

    public String toString(String prefix) {
        return prefix + toString();
    }

  /* Override this method if you want to customize how the node dumps
     out its children. */

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    public int getId() {
        return id;
    }

    public String printExpr(String s) {
        StringBuilder exp = Optional.ofNullable(toString()).map(StringBuilder::new).orElse(null);
        if (children != null){
            exp = s == null ? null : new StringBuilder(s);
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode)children[i];
                if (n != null) {
                    if(n.children == null){
                        exp = (exp == null) ? new StringBuilder("null") : exp;
                        exp.append(n.printExpr(""));
                        exp.append(i == 0 ? toString() : ")");
                    }
                    else{
                        exp = (exp == null) ? new StringBuilder("null") : exp;
                        if (s != null) {
                            exp.append(n.printExpr((s.equals("(") ? "" : "(")));
                        }
                        exp.append(i == 0 ? toString() : "");
                    }
                }
            }

        }
        return exp == null ? null : exp.toString();
    }

    public void setInt(int sum) {}

//    SimpleNode reduce() {
//        SimpleNode leftSubExpr = (SimpleNode)jjtGetChild(0);
//        SimpleNode rightSubExpr = (SimpleNode)jjtGetChild(1);
//
//        SimpleNode reducedLeftSubExpr = leftSubExpr.reduce(); // Recursively reduce the left sub expression
//        SimpleNode reducedRightSubExpr = rightSubExpr.reduce(); // Recursively reduce the right sub expression
//
//        SimpleNode reducedExpr = null;
//        if ( reducedLeftSubExpr instanceof ASTInteger && reducedRightSubExpr instanceof ASTInteger ) { // case that can be reduced
//            int sum =( (ASTInteger)reducedLeftSubExpr).getInt() + ((ASTInteger)reducedRightSubExpr).getInt(); // Create a new ASTInteger node for the sum
//            reducedExpr = new ASTInteger(eg2TreeConstants.JJTINTEGER);
//            ((ASTInteger)reducedExpr).setInt(sum);
//        } else { // case that cannot be reduced
//            reducedExpr = this;
//            jjtAddChild(reducedLeftSubExpr, 0);
//            jjtAddChild(reducedRightSubExpr, 1);
//        }
//
//        return reducedExpr;
//    }
}



/* JavaCC - OriginalChecksum=4e7554278eafb5addff5177451ba0b3c (do not edit this line) */
