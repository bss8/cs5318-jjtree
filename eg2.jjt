/**
 *
 * Copyright (c) 1996-1997 Sun Microsystems, Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.
 *
 */

options {
  MULTI=true; // an option for JJTree
              // set to build a multi mode tree
              // (with different types of nodes)
}

PARSER_BEGIN(eg2)

class eg2 {
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    eg2 t = new eg2(System.in);
    try {
      SimpleNode n = t.Start();
      SimpleNode m = (SimpleNode) n.jjtGetChild(0);
      System.out.println("\nThe binary tree representation: ");
      m.dump("");
      System.out.println("\nThe expression from the binary tree: ");
      m.printExpr();
      System.out.println("\nThe binary tree representation of the reduced expression: ");
      m = m.reduce();
      m.dump("");
      System.out.println("\nThe expression from the reduced binary tree");
      m.printExpr();
      //Commenting out this statement to match assignment example output
      //System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(eg2)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

ASTStart Start() : {}
{
  Expression()
  { return jjtThis; }
}


void Expression() #void : {}
{
  AdditiveExpression()
}

void AdditiveExpression() #void : {}
{
  (
    MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression()#Add(2) )*
  ) #Add(>1)
}

void MultiplicativeExpression() #void : {}
{
  (
    UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression()#Mult(2) )*
  ) #Mult(>1)
}

void UnaryExpression() #void : {}
{
  "(" Expression() ")" | MyID() | Integer()
}

void MyID() :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

void Integer() :
{
    Token t;
}
{
    t=<INTEGER_LITERAL>
    {
        jjtThis.setName(t.image);
    }
}