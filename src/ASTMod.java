/* Generated By:JJTree: Do not edit this line. ASTMod.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMod extends SimpleNode {
  public ASTMod(int id) {
    super(id);
  }

  public ASTMod(eg2 p, int id) {
    super(p, id);
  }

  @Override
  public String toString() {
    return "%";
  }


  @Override
  public SimpleNode reduce() {
    SimpleNode leftSubExpr = (SimpleNode) jjtGetChild(0);
    SimpleNode rightSubExpr = (SimpleNode) jjtGetChild(1);

    SimpleNode reducedLeftSubExpr = leftSubExpr.reduce(); // Recursively reduce the left sub expression
    SimpleNode reducedRightSubExpr = rightSubExpr.reduce(); // Recursively reduce the right sub expression

    SimpleNode reducedExpr;
    if (reducedLeftSubExpr instanceof ASTInteger && reducedRightSubExpr instanceof ASTInteger) { // case that can be reduced
      int sum = ((ASTInteger) reducedLeftSubExpr).getInt() % ((ASTInteger) reducedRightSubExpr).getInt(); // Create a new ASTInteger node for the sum
      reducedExpr = new ASTInteger(eg2TreeConstants.JJTINTEGER);
      reducedExpr.setInt(sum);
    } else { // case that cannot be reduced
      reducedExpr = this;
      jjtAddChild(reducedLeftSubExpr, 0);
      jjtAddChild(reducedRightSubExpr, 1);
    }

    return reducedExpr;
  }

}
/* JavaCC - OriginalChecksum=7a420ef7594a9e1206556e0a3cf3142d (do not edit this line) */
